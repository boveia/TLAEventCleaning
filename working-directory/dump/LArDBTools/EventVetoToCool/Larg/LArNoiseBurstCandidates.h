#ifndef LARNOISEBURSTCANDIDATES_H
#define LARNOISEBURSTCANDIDATES_H

#ifndef EV_OFFLINE
#include <is/info.h>
#endif

#include <string>
#include <ostream>
#include <vector>


// <<BeginUserCode>>

// <<EndUserCode>>

namespace Larg
{
/**
 * 
 * @author  generated by the IS tool
 * @version 14/03/16
 */

class LArNoiseBurstCandidates 
#ifndef EV_OFFLINE
: public ISInfo 
#endif
{
public:

    /**
     * Time stamps of noise-burst canidates
     */
    std::vector<unsigned int>     TimeStamp;

    /**
     * Flag describing a noise-burst candidate
     */
    std::vector<unsigned char>    Flag;

    /**
     * time stamp of noise burst candidate (nanoseconds offset)
     */
    std::vector<unsigned int>     TimeStamp_ns;

#ifndef EV_OFFLINE
    static const ISType & type() {
	static const ISType type_ = LArNoiseBurstCandidates( ).ISInfo::type();
	return type_;
    }
#endif
    virtual std::ostream & print( std::ostream & out ) const {
#ifndef EV_OFFLINE
	ISInfo::print( out );
#endif
	out << std::endl;
	out << "TimeStamp[" << TimeStamp.size() << "]:\t// Time stamps of noise-burst canidates" << std::endl;
	for ( size_t i = 0; i < TimeStamp.size(); ++i )
	    out << i << " : " << TimeStamp[i] << std::endl;
	out << "Flag[" << Flag.size() << "]:\t// Flag describing a noise-burst candidate" << std::endl;
	for ( size_t i = 0; i < Flag.size(); ++i )
	    out << i << " : " << Flag[i] << std::endl;
	out << "TimeStamp_ns[" << TimeStamp_ns.size() << "]:\t// time stamp of noise burst candidate (nanoseconds offset)" << std::endl;
	for ( size_t i = 0; i < TimeStamp_ns.size(); ++i )
	    out << i << " : " << TimeStamp_ns[i] << std::endl;
	return out;
    }

    LArNoiseBurstCandidates( )
#ifndef EV_OFFLINE
      : ISInfo( "LArNoiseBurstCandidates" )
#endif
    {
	initialize();
    }

    ~LArNoiseBurstCandidates(){

// <<BeginUserCode>>

// <<EndUserCode>>
    }

protected:
    LArNoiseBurstCandidates( const std::string & type )
#ifndef EV_OFFLINE
      : ISInfo( type )
#endif
    {
	initialize();
    }
#ifndef EV_OFFLINE
    void publishGuts( ISostream & out ){
	out << TimeStamp << Flag << TimeStamp_ns;
    }

    void refreshGuts( ISistream & in ){
	in >> TimeStamp >> Flag >> TimeStamp_ns;
    }
#endif
private:
    void initialize()
    {

// <<BeginUserCode>>

// <<EndUserCode>>
    }


// <<BeginUserCode>>

// <<EndUserCode>>
};

// <<BeginUserCode>>

// <<EndUserCode>>
inline std::ostream & operator<<( std::ostream & out, const LArNoiseBurstCandidates & info ) {
    info.print( out );
    return out;
}

}

#endif // LARNOISEBURSTCANDIDATES_H
